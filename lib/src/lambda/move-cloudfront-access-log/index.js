"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
const client_s3_1 = require("@aws-sdk/client-s3");
const s3 = new client_s3_1.S3Client();
// prefix to copy partitioned data to w/o leading but w/ trailing slash
const targetKeyPrefix = process.env.TARGET_KEY_PREFIX;
const hiveCompatiblePartitions = process.env.HIVE_COMPATIBLE_PARTITIONS;
// regex for filenames by Amazon CloudFront access logs. Groups:
// - 1.	year
// - 2.	month
// - 3.	day
// - 4.	hour
const datePattern = "[^\\d](\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})[^\\d]";
const filenamePattern = "[^/]+$";
const handler = async (event) => {
    const bucket = event.detail.bucket.name;
    const sourceKey = event.detail.object.key;
    const sourceRegex = new RegExp(datePattern, "g");
    const match = sourceRegex.exec(sourceKey);
    if (match == null) {
        console.log(`Object key ${sourceKey} does not look like an access log file, so it will not be moved.`);
        return;
    }
    const [, year, month, day, hour] = match;
    const filenameRegex = new RegExp(filenamePattern, "g");
    const filenameRegExpExecArray = filenameRegex.exec(sourceKey);
    if (filenameRegExpExecArray === null) {
        console.log(`Object key ${sourceKey} does not look like an access log file, so it will not be moved.`);
        return;
    }
    const filename = filenameRegExpExecArray[0];
    const targetKey = hiveCompatiblePartitions === "true"
        ? `${targetKeyPrefix}year=${year}/month=${month}/day=${day}/hour=${hour}/${filename}`
        : `${targetKeyPrefix}${year}/${month}/${day}/${hour}/${filename}`;
    console.log(`Copying ${sourceKey} to ${targetKey}.`);
    const copyParams = {
        CopySource: `${bucket}/${sourceKey}`,
        Bucket: bucket,
        Key: targetKey,
    };
    try {
        await s3.send(new client_s3_1.CopyObjectCommand(copyParams));
    }
    catch (e) {
        Error(`Error while copying ${sourceKey}: ${e}`);
    }
    console.log(`Copied. Now deleting ${sourceKey}.`);
    const deleteParams = { Bucket: bucket, Key: sourceKey };
    try {
        await s3.send(new client_s3_1.DeleteObjectCommand(deleteParams));
    }
    catch (e) {
        throw new Error(`Error while deleting ${sourceKey}: ${e}`);
    }
    console.log(`Deleted ${sourceKey}.`);
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwRUFBMEU7QUFDMUUsaUNBQWlDO0FBQ2pDLGtEQUk0QjtBQXFCNUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxvQkFBUSxFQUFFLENBQUM7QUFFMUIsdUVBQXVFO0FBQ3ZFLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUM7QUFFdEQsTUFBTSx3QkFBd0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDO0FBRXhFLGdFQUFnRTtBQUNoRSxZQUFZO0FBQ1osYUFBYTtBQUNiLFdBQVc7QUFDWCxZQUFZO0FBQ1osTUFBTSxXQUFXLEdBQUcsaURBQWlELENBQUM7QUFDdEUsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDO0FBRTFCLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBNkQsRUFDN0QsRUFBRTtJQUNGLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUN4QyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFFMUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFMUMsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FDVCxjQUFjLFNBQVMsa0VBQWtFLENBQzFGLENBQUM7UUFDRixPQUFPO0lBQ1QsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUV6QyxNQUFNLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkQsTUFBTSx1QkFBdUIsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTlELElBQUksdUJBQXVCLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FDVCxjQUFjLFNBQVMsa0VBQWtFLENBQzFGLENBQUM7UUFDRixPQUFPO0lBQ1QsQ0FBQztJQUVELE1BQU0sUUFBUSxHQUFHLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVDLE1BQU0sU0FBUyxHQUNiLHdCQUF3QixLQUFLLE1BQU07UUFDakMsQ0FBQyxDQUFDLEdBQUcsZUFBZSxRQUFRLElBQUksVUFBVSxLQUFLLFFBQVEsR0FBRyxTQUFTLElBQUksSUFBSSxRQUFRLEVBQUU7UUFDckYsQ0FBQyxDQUFDLEdBQUcsZUFBZSxHQUFHLElBQUksSUFBSSxLQUFLLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUV0RSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsU0FBUyxPQUFPLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFFckQsTUFBTSxVQUFVLEdBQUc7UUFDakIsVUFBVSxFQUFFLEdBQUcsTUFBTSxJQUFJLFNBQVMsRUFBRTtRQUNwQyxNQUFNLEVBQUUsTUFBTTtRQUNkLEdBQUcsRUFBRSxTQUFTO0tBQ2YsQ0FBQztJQUVGLElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLDZCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxLQUFLLENBQUMsdUJBQXVCLFNBQVMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBRWxELE1BQU0sWUFBWSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUM7SUFFeEQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksK0JBQW1CLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLFNBQVMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsU0FBUyxHQUFHLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUEzRFcsUUFBQSxPQUFPLFdBMkRsQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcbmltcG9ydCB7XG4gIFMzQ2xpZW50LFxuICBDb3B5T2JqZWN0Q29tbWFuZCxcbiAgRGVsZXRlT2JqZWN0Q29tbWFuZCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zM1wiO1xuaW1wb3J0IHsgRXZlbnRCcmlkZ2VFdmVudCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5cbmludGVyZmFjZSBFdmVudE9iamVjdENyZWF0ZWQge1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIGJ1Y2tldDoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgfTtcbiAgb2JqZWN0OiB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgc2l6ZTogbnVtYmVyO1xuICAgIGV0YWc6IHN0cmluZztcbiAgICBcInZlcnNpb24taWRcIjogc3RyaW5nO1xuICAgIHNlcXVlbmNlcjogc3RyaW5nO1xuICB9O1xuICBcInJlcXVlc3QtaWRcIjogc3RyaW5nO1xuICByZXF1ZXN0ZXI6IHN0cmluZztcbiAgXCJzb3VyY2UtaXAtYWRkcmVzc1wiOiBzdHJpbmc7XG4gIHJlYXNvbjogXCJQdXRPYmplY3RcIjtcbn1cblxuY29uc3QgczMgPSBuZXcgUzNDbGllbnQoKTtcblxuLy8gcHJlZml4IHRvIGNvcHkgcGFydGl0aW9uZWQgZGF0YSB0byB3L28gbGVhZGluZyBidXQgdy8gdHJhaWxpbmcgc2xhc2hcbmNvbnN0IHRhcmdldEtleVByZWZpeCA9IHByb2Nlc3MuZW52LlRBUkdFVF9LRVlfUFJFRklYO1xuXG5jb25zdCBoaXZlQ29tcGF0aWJsZVBhcnRpdGlvbnMgPSBwcm9jZXNzLmVudi5ISVZFX0NPTVBBVElCTEVfUEFSVElUSU9OUztcblxuLy8gcmVnZXggZm9yIGZpbGVuYW1lcyBieSBBbWF6b24gQ2xvdWRGcm9udCBhY2Nlc3MgbG9ncy4gR3JvdXBzOlxuLy8gLSAxLlx0eWVhclxuLy8gLSAyLlx0bW9udGhcbi8vIC0gMy5cdGRheVxuLy8gLSA0Llx0aG91clxuY29uc3QgZGF0ZVBhdHRlcm4gPSBcIlteXFxcXGRdKFxcXFxkezR9KS0oXFxcXGR7Mn0pLShcXFxcZHsyfSktKFxcXFxkezJ9KVteXFxcXGRdXCI7XG5jb25zdCBmaWxlbmFtZVBhdHRlcm4gPSBcIlteL10rJFwiO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgZXZlbnQ6IEV2ZW50QnJpZGdlRXZlbnQ8XCJPYmplY3QgQ3JlYXRlZFwiLCBFdmVudE9iamVjdENyZWF0ZWQ+XG4pID0+IHtcbiAgY29uc3QgYnVja2V0ID0gZXZlbnQuZGV0YWlsLmJ1Y2tldC5uYW1lO1xuICBjb25zdCBzb3VyY2VLZXkgPSBldmVudC5kZXRhaWwub2JqZWN0LmtleTtcblxuICBjb25zdCBzb3VyY2VSZWdleCA9IG5ldyBSZWdFeHAoZGF0ZVBhdHRlcm4sIFwiZ1wiKTtcbiAgY29uc3QgbWF0Y2ggPSBzb3VyY2VSZWdleC5leGVjKHNvdXJjZUtleSk7XG5cbiAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGBPYmplY3Qga2V5ICR7c291cmNlS2V5fSBkb2VzIG5vdCBsb29rIGxpa2UgYW4gYWNjZXNzIGxvZyBmaWxlLCBzbyBpdCB3aWxsIG5vdCBiZSBtb3ZlZC5gXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBbLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyXSA9IG1hdGNoO1xuXG4gIGNvbnN0IGZpbGVuYW1lUmVnZXggPSBuZXcgUmVnRXhwKGZpbGVuYW1lUGF0dGVybiwgXCJnXCIpO1xuICBjb25zdCBmaWxlbmFtZVJlZ0V4cEV4ZWNBcnJheSA9IGZpbGVuYW1lUmVnZXguZXhlYyhzb3VyY2VLZXkpO1xuXG4gIGlmIChmaWxlbmFtZVJlZ0V4cEV4ZWNBcnJheSA9PT0gbnVsbCkge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYE9iamVjdCBrZXkgJHtzb3VyY2VLZXl9IGRvZXMgbm90IGxvb2sgbGlrZSBhbiBhY2Nlc3MgbG9nIGZpbGUsIHNvIGl0IHdpbGwgbm90IGJlIG1vdmVkLmBcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGZpbGVuYW1lID0gZmlsZW5hbWVSZWdFeHBFeGVjQXJyYXlbMF07XG5cbiAgY29uc3QgdGFyZ2V0S2V5ID1cbiAgICBoaXZlQ29tcGF0aWJsZVBhcnRpdGlvbnMgPT09IFwidHJ1ZVwiXG4gICAgICA/IGAke3RhcmdldEtleVByZWZpeH15ZWFyPSR7eWVhcn0vbW9udGg9JHttb250aH0vZGF5PSR7ZGF5fS9ob3VyPSR7aG91cn0vJHtmaWxlbmFtZX1gXG4gICAgICA6IGAke3RhcmdldEtleVByZWZpeH0ke3llYXJ9LyR7bW9udGh9LyR7ZGF5fS8ke2hvdXJ9LyR7ZmlsZW5hbWV9YDtcblxuICBjb25zb2xlLmxvZyhgQ29weWluZyAke3NvdXJjZUtleX0gdG8gJHt0YXJnZXRLZXl9LmApO1xuXG4gIGNvbnN0IGNvcHlQYXJhbXMgPSB7XG4gICAgQ29weVNvdXJjZTogYCR7YnVja2V0fS8ke3NvdXJjZUtleX1gLFxuICAgIEJ1Y2tldDogYnVja2V0LFxuICAgIEtleTogdGFyZ2V0S2V5LFxuICB9O1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgczMuc2VuZChuZXcgQ29weU9iamVjdENvbW1hbmQoY29weVBhcmFtcykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgRXJyb3IoYEVycm9yIHdoaWxlIGNvcHlpbmcgJHtzb3VyY2VLZXl9OiAke2V9YCk7XG4gIH1cblxuICBjb25zb2xlLmxvZyhgQ29waWVkLiBOb3cgZGVsZXRpbmcgJHtzb3VyY2VLZXl9LmApO1xuXG4gIGNvbnN0IGRlbGV0ZVBhcmFtcyA9IHsgQnVja2V0OiBidWNrZXQsIEtleTogc291cmNlS2V5IH07XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBzMy5zZW5kKG5ldyBEZWxldGVPYmplY3RDb21tYW5kKGRlbGV0ZVBhcmFtcykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBkZWxldGluZyAke3NvdXJjZUtleX06ICR7ZX1gKTtcbiAgfVxuICBjb25zb2xlLmxvZyhgRGVsZXRlZCAke3NvdXJjZUtleX0uYCk7XG59O1xuIl19